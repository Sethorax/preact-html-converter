{"version":3,"file":"node.js","sources":["src/component-manager.js","src/utils.js","src/base-converter.js","src/parser/node.js","src/integrations/node.js"],"sourcesContent":["const registeredComponents = {};\n\n/**\n * Register a component class with the specified name.\n *\n * @export\n * @param {string} name\n * @param {any} componentClass\n */\nexport function registerComponent(name, componentClass) {\n\tregisteredComponents[name.toLowerCase()] = componentClass;\n}\n\n/**\n * Retreive a component class with the specified name.\n * Return null if no component was registered under that name.\n *\n * @export\n * @param {string} name\n * @returns {Object|null}\n */\nexport function getComponent(name) {\n\tconst lcName = name.toLowerCase();\n\n\treturn Object.prototype.hasOwnProperty.call(registeredComponents, lcName) ? registeredComponents[lcName] : null;\n}\n","import { h } from 'preact';\nimport { getComponent } from './component-manager';\n\nconst NODE_TYPE_TEXT = '#text';\nconst NODE_TYPE_COMMENT = '#comment';\n\n/**\n * Returns an array of a node's child nodes.\n *\n * @export\n * @param {Node} rootNode\n * @returns {Array}\n */\nexport function traverseNodeTree(rootNode) {\n\tconst nodeTree = [];\n\n\tfor (let i = 0; i < rootNode.childNodes.length; i++) {\n\t\tnodeTree.push(convertNode(rootNode.childNodes[i], i));\n\t}\n\n\treturn (nodeTree.length === 1) ? nodeTree[0] : nodeTree;\n}\n\n/**\n * Converts a node.\n * If the node is of either type text or comment, the value will be returned.\n * Otherwise the node will be converted to a Preact element or component.\n *\n * @export\n * @param {Node} node\n * @param {number} key\n * @returns {string|Object}\n */\nexport function convertNode(node, key) {\n\tif (node.nodeName === NODE_TYPE_TEXT || node.nodeName === NODE_TYPE_COMMENT) {\n\t\treturn node.value || node.nodeValue;\n\t}\n\n\tconst component = getComponent(node.nodeName);\n\tconst attributes = convertAttributes(node.attrs || node.attributes, key);\n\tconst tagName = component ? component : node.tagName.toLowerCase();\n\n\tif (node.childNodes.length === 0) {\n\t\treturn h(tagName, attributes);\n\t}\n\n\tconst children = [];\n\n\tfor (let i = 0; i < node.childNodes.length; i++) {\n\t\tchildren.push(convertNode(node.childNodes[i], i));\n\t}\n\n\treturn h(tagName, attributes, children);\n}\n\n/**\n * Convert the node's attributes to their Preact counterpart.\n *\n * @export\n * @param {Array} attrs\n * @param {number} key\n * @returns {Object}\n */\nexport function convertAttributes(attrs, key) {\n\tconst attributes = { key };\n\n\tif (!attrs) return attributes;\n\n\tfor (let i = 0; i < attrs.length; i++) {\n\t\tattributes[attrs[i].name] = (attrs[i].name === 'style') ? convertStylesToObject(attrs[i].value) : attrs[i].value;\n\t}\n\n\treturn attributes;\n}\n\n/**\n * Convert inline styles to the Preact version.\n *\n * @export\n * @param {string} styleString\n * @returns {Object}\n */\nexport function convertStylesToObject(styleString) {\n\tconst styles = styleString.split(';').reduce((obj, styleDeclaration) => {\n\t\tif (styleDeclaration) {\n\t\t\tconst parts = styleDeclaration.split(':');\n\t\t\tconst key = parts[0].trim();\n\t\t\tconst keyArray = Array.from(key);\n\n\t\t\tArray.from(key).forEach((char, index) => {\n\t\t\t\tif (char === '-') {\n\t\t\t\t\tkeyArray[index + 1] = keyArray[index + 1].toUpperCase();\n\t\t\t\t\tkeyArray[index] = null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tobj[keyArray.join('')] = parts[1];\n\t\t}\n\n\t\treturn obj;\n\t}, {});\n\n\treturn styles;\n}\n\n","import { h } from 'preact';\nimport { registerComponent } from './component-manager';\nimport { traverseNodeTree, convertAttributes } from './utils';\n\n/**\n * BaseConverter class.\n * Holds all methods shared by all integrations.\n *\n * @export\n * @class BaseConverter\n */\nexport default class BaseConverter {\n\t/**\n\t * Creates an instance of BaseConverter.\n\t * Parser will be passed by integration classes.\n\t *\n\t * @param {Object} parser\n\t * @memberof BaseConverter\n\t */\n\tconstructor(parser) {\n\t\tthis.parser = parser;\n\t}\n\n\t/**\n\t * Register a Preact component with the given name.\n\t *\n\t * @param {string} name\n\t * @param {any} componentClass\n\t * @memberof BaseConverter\n\t */\n\tregisterComponent(name, componentClass) {\n\t\tregisterComponent(name, componentClass);\n\t}\n\n\t/**\n\t * Parse the html string and traverse the resulting nodes.\n\t * Returns an array of Preact elements or components.\n\t *\n\t * @param {string} htmlString\n\t * @returns\n\t * @memberof BaseConverter\n\t */\n\tconvert(htmlString) {\n\t\tif (typeof htmlString !== 'string') {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst html = this.parser.parseFragment(htmlString);\n\n\t\tif (html.childNodes.length > 0) {\n\t\t\treturn traverseNodeTree(html);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Parse the html string with the specified parser.\n\t * If the html string has only one root node, the root node\n\t * will be converted to a Preact element. The child nodes will\n\t * be addes as innerHTML.\n\t *\n\t * If more than one root nodes are present, the root nodes will\n\t * be added as child nodes to a div element.\n\t *\n\t * Please note that Preact is not aware of the child nodes.\n\t * If you need Preact to be aware of the child nodes, you probably\n\t * want to use the non-static convert method.\n\t *\n\t * @static\n\t * @param {string} htmlString\n\t * @param {Object} parser\n\t * @returns\n\t * @memberof BaseConverter\n\t */\n\tstatic convertStatic(htmlString, parser) {\n\t\tif (typeof htmlString !== 'string') {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst html = parser.parseFragment(htmlString);\n\n\t\tif (html.childNodes.length > 0) {\n\t\t\tlet rootNode;\n\n\t\t\tif (html.childNodes.length === 1) {\n\t\t\t\tconst node = html.childNodes[0];\n\t\t\t\trootNode = h(node.nodeName.toLowerCase(), Object.assign({\n\t\t\t\t\tdangerouslySetInnerHTML: {\n\t\t\t\t\t\t__html: parser.serialize(node)\n\t\t\t\t\t}\n\t\t\t\t}, convertAttributes(node.attrs || node.attributes, 0)));\n\t\t\t} else {\n\t\t\t\trootNode = h('div', { dangerouslySetInnerHTML: { __html: htmlString } });\n\t\t\t}\n\n\t\t\treturn rootNode;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","import htmlParser from 'parse5';\n\n/**\n * Parse html string and return all nodes.\n *\n * @param {string} htmlString\n * @returns {Object}\n */\nfunction parseFragment(htmlString) {\n\treturn htmlParser.parseFragment(htmlString);\n}\n\n/**\n * Returns the node's inner html content as a string.\n *\n * @param {Node} node\n * @returns {string}\n */\nfunction serialize(node) {\n\treturn htmlParser.serialize(node);\n}\n\nexport default { parseFragment, serialize };\n","import BaseConverter from '../base-converter';\nimport parser from '../parser/node';\n\n/**\n * PreactHTMLConverter class that uses parse5 to parse html.\n *\n * @export\n * @class PreactHTMLConverter\n * @extends {BaseConverter}\n */\nexport default class PreactHTMLConverter extends BaseConverter {\n\t/**\n\t * Creates an instance of PreactHTMLConverter with parse5 as parser.\n\t * @memberof PreactHTMLConverter\n\t */\n\tconstructor() {\n\t\tsuper(parser);\n\t}\n\n\t/**\n\t * Calls parent method with parse5 as parser.\n\t *\n\t * @static\n\t * @param {string} htmlString\n\t * @returns {Array}\n\t * @memberof PreactHTMLConverter\n\t */\n\tstatic convertStatic(htmlString) {\n\t\treturn super.convertStatic(htmlString, parser);\n\t}\n}\n"],"names":["registeredComponents","const","NODE_TYPE_TEXT","NODE_TYPE_COMMENT","convertNode","node","key","nodeName","value","nodeValue","lcName","component","toLowerCase","Object","prototype","hasOwnProperty","call","attributes","convertAttributes","attrs","tagName","childNodes","length","h","children","i","push","let","name","styles","split","reduce","obj","styleDeclaration","parts","trim","keyArray","Array","from","forEach","char","index","toUpperCase","join","BaseConverter","parser","registerComponent","componentClass","convert","htmlString","html","this","parseFragment","rootNode","nodeTree","traverseNodeTree","convertStatic","assign","serialize","htmlParser","PreactHTMLConverter","super"],"mappings":"iGAAMA,KCGNC,IAAMC,EAAiB,QACjBC,EAAoB,WA6B1B,SAAgBC,EAAYC,EAAMC,GACjC,GAAID,EAAKE,WAAaL,GAAkBG,EAAKE,WAAaJ,EACzD,OAAOE,EAAKG,OAASH,EAAKI,UAG3BR,IDhBMS,ECgBAC,GDhBAD,ECgByBL,EAAKE,SDhBhBK,cAEbC,OAAOC,UAAUC,eAAeC,KAAKhB,EAAsBU,GAAUV,EAAqBU,GAAU,MCerGO,EAAaC,EAAkBb,EAAKc,OAASd,EAAKY,WAAYX,GAC9Dc,EAAUT,GAAwBN,EAAKe,QAAQR,cAErD,GAA+B,IAA3BP,EAAKgB,WAAWC,OACnB,OAAOC,IAAEH,EAASH,GAKnB,IAFAhB,IAAMuB,KAEGC,EAAI,EAAGA,EAAIpB,EAAKgB,WAAWC,OAAQG,IAC3CD,EAASE,KAAKtB,EAAYC,EAAKgB,WAAWI,GAAIA,IAG/C,OAAOF,IAAEH,EAASH,EAAYO,GAW/B,SAAgBN,EAAkBC,EAAOb,GACxCL,IAAMgB,OAAeX,GAErB,IAAKa,EAAO,OAAOF,EAEnB,IAAKU,IAAIF,EAAI,EAAGA,EAAIN,EAAMG,OAAQG,IACjCR,EAAWE,EAAMM,GAAGG,MAA2B,UAAlBT,EAAMM,GAAGG,WAcjCC,EAd2EV,EAAMM,GAAGjB,MAc/DsB,MAAM,KAAKC,gBAAQC,EAAKC,GAClD,GAAIA,EAAkB,CACrBhC,IAAMiC,EAAQD,EAAiBH,MAAM,KAC/BxB,EAAM4B,EAAM,GAAGC,OACfC,EAAWC,MAAMC,KAAKhC,GAE5B+B,MAAMC,KAAKhC,GAAKiC,iBAASC,EAAMC,GACjB,MAATD,IACHJ,EAASK,EAAQ,GAAKL,EAASK,EAAQ,GAAGC,cAC1CN,EAASK,GAAS,QAIpBT,EAAII,EAASO,KAAK,KAAOT,EAAM,GAGhC,OAAOF,QA9B2Fb,EAAMM,GAAGjB,MAG5G,OAAOS,EC7DR,IAAqB2B,EAQpB,SAAYC,QACNA,OAASA,eAUfC,2BAAkBlB,EAAMmB,IFrBzB,SAAkCnB,EAAMmB,GACvC/C,EAAqB4B,EAAKhB,eAAiBmC,GEqBxBnB,EAAMmB,gBAWzBC,iBAAQC,MACmB,iBAAfA,SACH,SAGFC,EAAOC,KAAKN,OAAOO,cAAcH,UAEnCC,EAAK7B,WAAWC,OAAS,EDpC/B,SAAiC+B,GAGhC,IAFApD,IAAMqD,KAEG7B,EAAI,EAAGA,EAAI4B,EAAShC,WAAWC,OAAQG,IAC/C6B,EAAS5B,KAAKtB,EAAYiD,EAAShC,WAAWI,GAAIA,IAGnD,OAA4B,IAApB6B,EAAShC,OAAgBgC,EAAS,GAAKA,EC8BtCC,CAAiBL,GAGlB,QAsBDM,uBAAcP,EAAYJ,MACN,iBAAfI,SACH,SAGFC,EAAOL,EAAOO,cAAcH,MAE9BC,EAAK7B,WAAWC,OAAS,EAAG,KAC3B+B,KAE2B,IAA3BH,EAAK7B,WAAWC,OAAc,KAC3BjB,EAAO6C,EAAK7B,WAAW,KAClBE,IAAElB,EAAKE,SAASK,cAAeC,OAAO4C,wCAEvCZ,EAAOa,UAAUrD,KAExBa,EAAkBb,EAAKc,OAASd,EAAKY,WAAY,YAEzCM,IAAE,uCAA4C0B,YAGnDI,SAGD,MC7ET,qBAdA,SAAuBJ,GACtB,OAAOU,EAAWP,cAAcH,cASjC,SAAmB5C,GAClB,OAAOsD,EAAWD,UAAUrD,KCTRuD,cAKpB,aACCC,YAAMhB,uFAWPe,EAAOJ,uBAAcP,GACpB,OAAOY,EAAML,wBAAcP,EAAYJ,OAlBQD"}